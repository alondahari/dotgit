#!/bin/sh

# This is a script which is intended to provide the following
# functionality.
#
# 1. Prevent users from commiting improper messages using -m
# 2. Educate users on commit message best practices 
# 3. Contextually prevent users from commiting to a branch without an
#    issue reference (currently supports acorns context & my default
#    github)
# 4. Inform users on git best practices for adding issue into branch
#    name
# 5. Extract issues from branch name and add them to commit message

source ~/.git/support/hook_helpers.sh

function main {
  # The commit_msg_file contains the name of the file that contains the
  # commit log message.
  local commit_msg_file=$1

  # The commit_source is set to one of the following given their
  # associated conditional states.
  #
  # message (if -m or -F option given)
  # template (if -t option was given or configuration option commit.template is set)
  # merge (if commit is a merge or .git/MERGE_MSG file exists)
  # squash (if a .git/SQUASH_MSG file exists)
  # commit (if -c, -C, or --ammend option was given)
  local commit_source=$2

  # The commit_sha1 contains the sha1 that is used as a source for the
  # commit message if -c, -C, or --ammend option was given
  local commit_sha1=$3

  # Grab the repository path before any other commands possibly changed
  # the current working directory.
  local repository_path=$(get_repository_path)

  # Prevent user from using -m or -F because they should be providing
  # intent (why they made the change they did) not just what they did. It
  # is pretty much impossible to do that in the 50 char less summary.
  if [ $commit_source -a $commit_source == 'message' ]; then
    echo "What do you think you are doing?"
    echo "Real devs don't use -m, they write valuable commit messages!"
    echo
    echo "References:"
    echo " - http://chris.beams.io/posts/git-commit/"
    echo " - http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html"
    echo " - https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message"
    echo " - https://robots.thoughtbot.com/better-commit-messages-with-a-gitmessage-template"
    exit 1
  fi

  # Prevent users from committing if they haven't specified a JIRA issue
  # in their branch name. Also, extract the Jira issue identifier and
  # convert it into a URL and append it to the commit message.
  local current_branch=$(get_current_branch)
  if [ "$current_branch" ]; then
    local repository_context=$(get_repository_context "${repository_path}")
    if [ "$repository_context" == "acorns" ]; then
      local jira_issues=$(get_jira_issues_from_branch_name "$current_branch")
      if [ "$jira_issues" ]; then
        insert_acorns_issue_links_into_commit_message "$jira_issues" "$commit_msg_file"
      else
        echo "tix please!"
        echo
        echo "Branch '${current_branch}' needs to include a JIRA issue."
        echo "  ex: WEB-2342342_add_health_endpoint"
        echo
        echo "This can easily be done with something like..."
        echo "$ git checkout -b <new-branch-with-tix>"
        echo "$ git push origin :${current_branch}"
        echo "$ git branch -D ${current_branch}"
        exit 1
      fi
    else
      local issues=$(get_issues_from_branch_name "$current_branch")
      if [ "$issues" ]; then
        insert_issues_into_commit_message "$issues" "$commit_msg_file"
      else
        echo "tix please!"
        echo
        echo "Branch '${current_branch}' needs to include an issue."
        echo "  ex: add_health_endpoint-23422"
        echo
        echo "This can easily be done with something like..."
        echo "$ git checkout -b <new-branch-with-tix>"
        echo "$ git push origin :${current_branch}"
        echo "$ git branch -D ${current_branch}"
        exit 1
      fi
    fi
  else
    echo "Err: Failed to get current branch!"
    echo "This script is now broken, please correct it."
    exit 1
  fi
}

main $1 $2 $3
