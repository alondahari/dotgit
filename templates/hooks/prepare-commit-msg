#!/bin/sh

# This is a script which is intended to provide the following
# functionality.
#
# 1. Prevent users from commiting improper messages using -m
# 2. Educate users on commit message best practices 
# 3. Contextually prevent users from commiting to a branch without an
#    issue reference (currently supports acorns context & my default)
# 4. Inform users on git best practices for adding issue into branch
#    name
# 5. Extract issues from branch name and add them to commit message

# Get the path to the repository. This function returns it via stdout.
# Hence, this method is intended to be called using command
# substitution.
# ex: repo_path=$(get_repository_path)
function get_repository_path {
  echo $(pwd -P)
}

# Get the repository name. This function returns it via stdout. Hence,
# this method is intended to be called using command substitution.
# ex: repo_name=$(get_repository_name)
function get_repository_name {
  echo $(basename $(get_repository_path))
}

# Get the repository context. This function returns the context wrapping
# the repository via stdout. Hence, this method is intended to be called
# using command substitution.
# ex: repo_context=$(get_repository_context)
function get_repository_context {
  local repository_context_path=$(dirname $(get_repository_path))
  echo $(basename ${repository_context_path}) 
}

# Obtain the name of the currently checked out branch and 'return' it by
# echoing it to stdout. It is intended to be called using command
# substitution.
# ex: current_branch=$(get_current_branch)
function get_current_branch {
  local current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  echo "$current_branch"
}

# Attempt to fetch any jira issues from the provided branch name. If
# jira issues are found a jira issue is returned via stdout space
# separated. If no jira issues are found an empty string is returned via
# stdout. Hence, this function is intended to be called using command
# substitution.
# ex: jira_issues=$(get_jira_issues_from_branch_name "some_branch_name")
function get_jira_issues_from_branch_name {
  local branch_name=$1
  echo "$(echo "$branch_name" | grep -Eo '[A-Z]+-[0-9]+')"
}

# Attempt to fetch any issues from the provided branch name. If any
# github style issues are found an issue is returned via stdout space
# separated. If on issues are found an empty string is returned via
# stdout. Hence, this function is intended to be called using command
# substitution.
# ex: issues=$(get_issues_from_branch_name "some_branch_name")
function get_issues_from_branch_name {
  local branch_name=$1
  echo "$(echo "$branch_name" | grep -Eo '\-?([0-9]+)\-?' | sed -n 's/-//gp')"
}

# Build jira issue link given an issue identifier. This method returns
# the built jira issue link via stdout. Hence, it is intended to be
# called using command substitution.
# ex: jira_issue_link=$(build_jira_issue_link "WEB-23423")
function build_jira_issue_link {
  local jira_issue=$1
  echo "https://acorns.atlassian.net/browse/${jira_issue}"
}

# Build github style issue reference for the given issue identifier.
# This method returns the built issue reference via stdout. Hence, it is
# intended to be called using command substitution.
# ex: issue_reference=$(build_issue_reference "3222")
function build_issue_reference {
  local issue=$1
  echo "#${issue}"
}

# Insert the jira issue links given the jira issue identifiers and the
# commit message file to insert them into.
# ex: insert_issue_links_into_commit_message "WEB-23423\nOPS-2332" ".git/COMMIT_EDITMSG"
function insert_acorns_issue_links_into_commit_message {
  local jira_issues=$1
  local commit_message_file=$2

  local jira_issue_links=''
  for jira_issue in $jira_issues; do 
    local jira_issue_link=$(build_jira_issue_link $jira_issue)
    jira_issue_links="${jira_issue_links}"'\'$'\n'"Issue: ${jira_issue_link}"
  done

  sed -i.back '/^# Please enter the commit/i\'$'\n'"${jira_issue_links}"$'\n' $commit_message_file
}

# Insert the issue references given the issue identifiers and the
# commit message file to insert them into.
# ex: insert_issue_into_commit_message "23423 2332" ".git/COMMIT_EDITMSG"
function insert_issues_into_commit_message {
  local issues=$1
  local commit_message_file=$2

  local formatted_refs=$(echo "$issues" | sed -n 's/ /, /g')
  local issue_refs=''
  for issue in $issues; do 
    local issue_ref=$(build_issue_reference $issue)
    if [ "$issue_refs" ]; then
      issue_refs="${issue_refs}, ${issue_ref}"
    else
      issue_refs="${issue_refs}${issue_ref}"
    fi
  done
  issue_refs='\'$'\n'"Issues: ${issue_refs}"

  sed -i.back '/^# Please enter the commit/i\'$'\n'"${issue_refs}"$'\n' $commit_message_file
}

function main {
  # The commit_msg_file contains the name of the file that contains the
  # commit log message.
  local commit_msg_file=$1

  # The commit_source is set to one of the following given their
  # associated conditional states.
  #
  # message (if -m or -F option given)
  # template (if -t option was given or configuration option commit.template is set)
  # merge (if commit is a merge or .git/MERGE_MSG file exists)
  # squash (if a .git/SQUASH_MSG file exists)
  # commit (if -c, -C, or --ammend option was given)
  local commit_source=$2

  # The commit_sha1 contains the sha1 that is used as a source for the
  # commit message if -c, -C, or --ammend option was given
  local commit_sha1=$3

  # Prevent user from using -m or -F because they should be providing
  # intent (why they made the change they did) not just what they did. It
  # is pretty much impossible to do that in the 50 char less summary.
  if [ $commit_source -a $commit_source == 'message' ]; then
    echo "What do you think you are doing?"
    echo "Real devs don't use -m, they write valuable commit messages!"
    echo
    echo "References:"
    echo " - http://chris.beams.io/posts/git-commit/"
    echo " - http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html"
    echo " - https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message"
    echo " - https://robots.thoughtbot.com/better-commit-messages-with-a-gitmessage-template"
    exit 1
  fi

  # Prevent users from committing if they haven't specified a JIRA issue
  # in their branch name. Also, extract the Jira issue identifier and
  # convert it into a URL and append it to the commit message.
  local current_branch=$(get_current_branch)
  if [ "$current_branch" ]; then
    local repository_context=$(get_repository_context)
    if [ "$repository_context" == "acorns" ]; then
      local jira_issues=$(get_jira_issues_from_branch_name "$current_branch")
      if [ "$jira_issues" ]; then
        insert_acorns_issue_links_into_commit_message "$jira_issues" "$commit_msg_file"
      else
        echo "tix please!"
        echo
        echo "Branch '${current_branch}' needs to include a JIRA issue."
        echo "  ex: WEB-2342342_add_health_endpoint"
        echo
        echo "This can easily be done with something like..."
        echo "$ git checkout -b <new-branch-with-tix>"
        echo "$ git push origin :${current_branch}"
        echo "$ git branch -D ${current_branch}"
        exit 1
      fi
    else
      local issues=$(get_issues_from_branch_name "$current_branch")
      if [ "$issues" ]; then
        insert_issues_into_commit_message "$issues" "$commit_msg_file"
      else
        echo "tix please!"
        echo
        echo "Branch '${current_branch}' needs to include an issue."
        echo "  ex: add_health_endpoint-23422"
        echo
        echo "This can easily be done with something like..."
        echo "$ git checkout -b <new-branch-with-tix>"
        echo "$ git push origin :${current_branch}"
        echo "$ git branch -D ${current_branch}"
        exit 1
      fi
    fi
  else
    echo "Err: Failed to get current branch!"
    echo "This script is now broken, please correct it."
    exit 1
  fi
}

main $1 $2 $3
